import speech_recognition as sr
import pyttsx3
import pyjokes
import requests
from tkinter import Tk, Label, Button
from PIL import Image, ImageTk, Image as PILImage
from io import BytesIO
import webbrowser
import threading
import sounddevice as sd
from scipy.io.wavfile import write
import speech_recognition as sr
import os
import sounddevice as sd
from scipy.io.wavfile import write
import wave
import speech_recognition as sr
import os
import numpy as np

# Initialize the speech engine
def speak(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

# Listen to voice commands
def listen():
    recognizer = sr.Recognizer()
    temp_file = "temp_audio.wav"  # Temporary file for audio
    try:
        # Record audio using SoundDevice
        print("Recording your voice... Speak now!")
        sample_rate = 44100  # CD quality audio
        duration = 5  # Record for 5 seconds
        audio_data = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='int16')  # Mono audio
        sd.wait()  # Wait until the recording is finished

        # Save the audio as a properly formatted PCM WAV file
        with wave.open(temp_file, "wb") as wf:
            wf.setnchannels(1)  # Mono audio
            wf.setsampwidth(2)  # Sample width (16-bit PCM)
            wf.setframerate(sample_rate)
            wf.writeframes(audio_data.tobytes())

        # Recognize the speech in the saved audio
        with sr.AudioFile(temp_file) as source:
            audio = recognizer.record(source)
            command = recognizer.recognize_google(audio)
            print(f"You said: {command}")
            return command.lower()

    except sr.UnknownValueError:
        print("Sorry, I couldn't understand that. Please try again.")
        return None

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return None

    finally:
        # Always ensure the temp file is removed after processing
        if os.path.exists(temp_file):
            try:
                os.remove(temp_file)
            except Exception as cleanup_error:
                print(f"Could not delete temp file: {cleanup_error}")
# Tell a joke
def tell_joke():
    joke = pyjokes.get_joke()
    speak(joke)
    print(joke)

# Fetch an image from Unsplash based on the query
def search_image(query):
    api_key = "JqnthAEP4LWtDFiytK5jn3RyGiW5vFQwQspGJHGWihI"  # Replace with your Unsplash Access Key
    url = f"https://api.unsplash.com/search/photos?query={query}&client_id={api_key}"
    response = requests.get(url).json()
    if response["total"] > 0:
        image_url = response['results'][0]['urls']['small']
        image_data = requests.get(image_url).content
        img = PILImage.open(BytesIO(image_data))
        img.show()
    else:
        speak("Sorry, I couldn't find any images for your search.")

# Search for songs on YouTube
def search_youtube(song_name):
    url = f"https://www.youtube.com/results?search_query={song_name}"
    webbrowser.open(url)
    speak(f"Here are the search results for {song_name}")

# Provide emotional support
def emotional_support():
    messages = [
        "You are doing amazing! Never give up!",
        "Remember, challenges make you stronger!",
        "Believe in yourself! You're capable of great things.",
    ]
    message = messages[0]
    speak(message)
    print(message)

# Process the voice command
def process_command(command):
    if "joke" in command:
        tell_joke()
    elif "picture of" in command:
        query = command.replace("picture of", "").strip()
        search_image(query)
    elif "play song" in command:
        song_name = command.replace("play song", "").strip()
        search_youtube(song_name)
    elif "emotional support" in command:
        emotional_support()
    else:
        speak("I’m not sure how to do that yet, but I’m learning!")

# Voice command handler
def voice_command():
    while True:
        command = listen()
        if command:
            if "exit" in command or "quit" in command:
                speak("Goodbye! Have a great day!")
                break
            process_command(command)

# GUI setup
def start_voice_command():
    thread = threading.Thread(target=voice_command)
    thread.start()

# Create the GUI
root = Tk()
root.title("Personalized AI")
root.geometry("600x400")  # Width x Height

# Load the AI avatar image
try:
    avatar_image = PILImage.open("ai_avatar.png")  # Ensure the image is in the same folder
    avatar_image = avatar_image.resize((200, 200))  # Resize image for better fit
    avatar_photo = ImageTk.PhotoImage(avatar_image)

    # Display the avatar
    avatar_label = Label(root, image=avatar_photo)
    avatar_label.pack(pady=10)  # Add padding to position it better
except FileNotFoundError:
    Label(root, text="AI Avatar not found!").pack()

# Add buttons
Button(
    root,
    text="Start Voice Command",
    command=start_voice_command,
    font=("Arial", 12),
    bg="green",
    fg="white",
    padx=10,
    pady=5
).pack(pady=10)

Button(
    root,
    text="Say Hello",
    command=lambda: speak("Hello, Ammu! How can I help you?"),
    font=("Arial", 12),
    bg="blue",
    fg="white",
    padx=10,
    pady=5
).pack(pady=10)

# Run the GUI
root.mainloop()
